type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    import java.io.File
    import java.io.FileNotFoundException
    import kotlin.math.floor
    import kotlin.math.sqrt

    val SPACES = "\\s+".toRegex()

    class PhoneBook {


        private val phoneBook = mutableListOf<Pair<String, String>>()

        fun loadPhoneBook(filePath: String) {
            try {
                loadPhoneBookData(File(filePath))
            } catch (except: Exception) {
                when (except) {
                    is FileNotFoundException -> println("File Not Found Exception")
                    is AccessDeniedException -> println("Access Denied Exception")
                    is NoSuchFileException -> println("No Such File Exception")
                    else -> println(except.message)
                }
            }
        }

        fun bubbleSortPhoneEntry() {
            val phoneBookSize = phoneBook.size
            for (firstIndex in 0 until phoneBookSize) {
                for (secondIndex in 0 until phoneBookSize - firstIndex - 1) {
                    if (phoneBook[secondIndex].first > phoneBook[secondIndex + 1].first) {
                        val temp = phoneBook[secondIndex]
                        phoneBook[secondIndex] = phoneBook[secondIndex + 1]
                        phoneBook[secondIndex + 1] = temp

                    }
                }
            }
        }

        fun jumpSearch(value: String): Boolean {
            val blockSize = floor(sqrt(phoneBook.size.toDouble())).toInt()
            var startIndex = 0
            var lastIndex = 0
            var count = 0

            for (index in (0..phoneBook.size step blockSize)) {
                count++
                val currElem = phoneBook[index]
                return if (value == currElem.first) {
                    true
                } else if (value > currElem.first) {
                    continue
                } else if (value < currElem.first && index == 0) {
                    false
                } else {
                    startIndex = index - blockSize
                    lastIndex = index - 1
                    break
                }
            }

            for (index in lastIndex downTo startIndex) {
                count++
                val currVal = phoneBook[index]
                if (value == currVal.first) {
                    return true
                }
            }
            return false
        }

        private fun loadPhoneBookData(file: File) {
            file.forEachLine { line ->
                val (phoneNumber, name) = line.split(SPACES, 2)
                phoneBook.add(name.trim() to  phoneNumber)
            }
        }

        fun linearSearch(name: String): Boolean {
            for (entry in phoneBook) {
                if (entry.first == name) {
                    return true
                }
            }
            return false
        }
    }

    fun main() {

        var found = 0
        var lines = 0

        var found1 = 0
        var lines1 = 0
        val phoneBook = PhoneBook()
        phoneBook.loadPhoneBook("/Users/mandal/Downloads/directory.txt")

        val searchData = File("/Users/mandal/Downloads/find.txt")

        println("Start searching...")
        val start = System.currentTimeMillis()
        searchData.forEachLine {
            if (phoneBook.linearSearch(it.trim())) {
                ++found
            }
            ++lines
        }
        val end = System.currentTimeMillis()

        val min = (end - start) / 1000 / 60
        val sec = (end - start) / 1000 % 60
        val ms = (end - start) % 1000

        println("Found $found / $lines entries. Time taken: $min min. $sec sec. $ms ms.")


        val start2 = System.currentTimeMillis()
        phoneBook.bubbleSortPhoneEntry()
        val end2 = System.currentTimeMillis()
        val min2 = (end2 - start2) / 1000 / 60
        val sec2 = (end2 - start2) / 1000 % 60
        val ms2 = (end2 - start2) % 1000

        println("Start searching (bubble sort + jump search)...")
        val start1 = System.currentTimeMillis()
        searchData.forEachLine {
            if (phoneBook.jumpSearch(it.trim())) {
                ++found1
            }
            ++lines1
        }
        val end1 = System.currentTimeMillis()

        val min1 = (end1 - start1) / 1000 / 60
        val sec1 = (end1 - start1) / 1000 % 60
        val ms1 = (end1 - start1) % 1000

        println("Found $found1 / $lines1 entries. Time taken: $min1 min. $sec1 sec. $ms1 ms.")
        println("Sorting time: $min2 min. $sec2 sec. $ms2 ms.")
        println("Searching time: $min1 min. $sec1 sec. $ms1 ms.")
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBookTest extends StageTest {

        private long timeOnTestStart;

        @Override
        public List<TestCase> generate() {
            timeOnTestStart = System.currentTimeMillis();
            return Arrays.asList(
                    new TestCase().setTimeLimit(30 * 60 * 1000)
            );
        }


        private CheckResult checkPhrases(String reply, String... phrases) {
            reply = reply.toLowerCase();
            for (String phrase : phrases) {
                if (!reply.contains(phrase.toLowerCase())) {
                    return CheckResult.wrong("Not found the part `" + phrase + "` in your output.");
                }
            }
            return CheckResult.correct();
        }

        private List<String> findAll(String reply, String regex) {
            Matcher matcher = Pattern.compile(regex).matcher(reply);
            List<String> groups = new ArrayList<>();
            while (matcher.find()) {
                groups.add(matcher.group());
            }
            return groups;
        }

        private String timeRegex = "(\\d+)\\s*min.*?(\\d+)\\s*sec.*?(\\d+)\\s*ms";
        private Pattern timeRegexPattern = Pattern.compile(timeRegex);

        private long parseTimestamp(String timestamp) {
            Matcher matcher = timeRegexPattern.matcher(timestamp);
            if (!matcher.matches() || matcher.groupCount() < 3) {
                throw new IllegalStateException("???Not matches the line " + timestamp);
            }
            int min = Integer.parseInt(matcher.group(1));
            int sec = Integer.parseInt(matcher.group(2));
            int ms = Integer.parseInt(matcher.group(3));
            return ms + sec * 1000 + min * 1000 * 60;
        }


        @Override
        public CheckResult check(String reply, Object clue) {
            long realTime = System.currentTimeMillis() - timeOnTestStart;
            reply = reply.toLowerCase();
            CheckResult res = checkPhrases(reply,
                    "found",
                    "min.",
                    "sec.",
                    "ms.",
                    "sorting time",
                    "searching time",
                    "linear search",
                    "bubble sort",
                    "jump search",
                    "quick sort",
                    "binary search",
                    "hash table",
                    "creating time"
            );
            if (!res.isCorrect()) {
                return res;
            }

            List<String> stat1 = findAll(reply, "500 / 500");
            List<String> stat2 = findAll(reply, "500/500");

            if (stat1.size() + stat2.size() < 4) {
                return CheckResult.wrong("Your output should contain 4 times the phrase `500 / 500`");
            }

            List<String> timestamps = findAll(reply, timeRegex);
            if (timestamps.size() != 10) {
                return CheckResult.wrong("Your output should contain 10 timer outputs, but found "
                        + timestamps.size());
            }
            // should not fail..
            long t1 = parseTimestamp(timestamps.get(0));
            long t2 = parseTimestamp(timestamps.get(1));
            long t3 = parseTimestamp(timestamps.get(2));
            long t4 = parseTimestamp(timestamps.get(3));
            // qsort
            long t5 = parseTimestamp(timestamps.get(4));
            long t6 = parseTimestamp(timestamps.get(5));
            long t7 = parseTimestamp(timestamps.get(6));
            // hash table
            long t8 = parseTimestamp(timestamps.get(7));
            long t9 = parseTimestamp(timestamps.get(8));
            long t10 = parseTimestamp(timestamps.get(9));

            if (Math.abs(t3 + t4 - t2) > 100) {
                return CheckResult.wrong("Your third and fourth timer outputs in total (bubble sorting and searching) " +
                        "should be equal to the second (total search time).");
            }
            if (Math.abs(t6 + t7 - t5) > 100) {
                return CheckResult.wrong("Your 6-th and 7-th timer outputs in total (qsort and searching) " +
                        "should be equal to the 5-th (total search time).");
            }
            if (Math.abs(t9 + t10 - t8) > 100) {
                return CheckResult.wrong("Your 9-th and 10-th timer outputs in total (creating hashtable and searching) " +
                        "should be equal to the 8-th (total search time).");
            }

            long estimatedTime = t1 + t2 + t5 + t8;
            if (realTime < 1000) {
                return CheckResult.wrong("Your program completes too fast. Faster than a second!");
            }

            if (Math.abs(estimatedTime - realTime) > estimatedTime * 0.3) {
                return CheckResult.wrong("Your estimated time is not similar to real time the program works. " +
                        "Real time: " + realTime + "ms, estimated time: " + estimatedTime + "ms");
            }

            if (t8 >= t5) {
                return CheckResult.wrong("Your hashtable works slower, than quick sort + binary search.");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7751#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 01 May 2022 17:32:13 UTC
record: -1
